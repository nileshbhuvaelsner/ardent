{"version":3,"sources":["abstracts/_variables.scss","components/second-block.css","abstracts/_mixins.scss"],"names":[],"mappings":"AAWA;EACE,sBAAA;EACA,wBAAA;EACA,qBAAA;EAEA,gBAAA;EACA,gBAAA;EACA,eAAA;ACXF;;AD8FA,6EAAA;AElBA,oEAAA;AAgCA,mBAAA","file":"second-block.css","sourcesContent":["// -----------------------------------------------------------------------------\n// This file contains all application-wide Sass variables.\n// -----------------------------------------------------------------------------\n// Regular ( Open Sans ) font family\n$font-family-base:  'Syne', sans-serif !default;\n// $font-family-hgroup:  'Open Sans', 'Arial', sans-serif !default;\n$icon-family: \"iconfontfamily\" !important;\n\n// body contect text size\n$font-size-base:  rem(18px) !default; //16px (Don't change)\n\n:root{\n  --primary-100:    #FF5D2C;\n  --secondary-100:  #111013;\n  --text-color:     #111013;\n\n  --white:          #ffffff;\n  --black:          #000000;\n  --gray:           #707070;\n}\n\n// Colors\n$primary-100:     var(--primary-100) !default;\n$secondary-100:   var(--secondary-100) !default;\n\n$text-color:      var(--text-color) !default;\n\n// Start with assigning color names to specific hex values.\n$white:  var(--white) !default;\n$black:  var(--black) !default;\n$gray:   var(--gray) !default;\n\n// Body color\n$body-bg:       $white !default;\n$body-color:    $text-color !default;\n\n// Heading font Size\n$headingSize: (\n  'h1': rem(68px),\n  'h2': rem(32px),\n  'h3': rem(28px),\n  'h4': rem(24px),\n  'h5': rem(20px),\n  'h6': rem(18px),\n);\n\n$hgroup-margin-bottom: rem(16px) !default;\n$hgroup-font-family:   inherit !default;\n$hgroup-font-weight:   700 !default;\n$hgroup-line-height:   1.2 !default;\n$hgroup-color:         $text-color !default;\n\n// Forms\n$label-color:           $text-color;\n$label-font-weight:     400;\n$label-font-family:     $font-family-base;\n$label-font-size:       rem(16px);\n\n$input-bg:                 $white;\n$input-font-family:        $font-family-base;\n$input-font-size:          rem(16px);\n$input-font-weight:        400;\n$input-color:              $text-color;\n$input-color-placeholder:  rgba($text-color,0.6);\n$input-height-base:        rem(60px);\n$input-radius:             0;\n$input-border-color:       $white;\n$input-border-color-focus: $secondary-100;\n$textarea-height-base:     rem(164px);\n\n// Set assets path\n$img: '../images'; // background-img:url( #{$img}/)\n$fonts: '../fonts';\n\n// Container's maximum width\n$container-width: rem(1638px) !default;\n$gutters: rem(15px);\n$row-gutters: rem(30px);\n\n// Media Query breakpoints.\n$breakpoints: (\n  'sm': 576px, // Mobile Devices\n  'md': 768px, // Mobile Devices\n  'lg': 992px, // Tablet Devices\n  'xl': 1200px, // Laptop Devices\n  'xxl': 1400px // Desktop Devices\n);\n\n// Advance utilities\n$advance-utilities : true;\n\n// Spacing : padding and margin\n$spacing : true;\n$spaceamounts: (30);\n\n// Background and Text color classes(ex: .bg-white and .text-white)\n$bgColor-map: (\n  'white' : $white,\n  'black' : $black\n);\n\n/* Note: If need Disable Decimal-value functionilty open function.scss file */",":root {\n  --primary-100: #FF5D2C;\n  --secondary-100: #111013;\n  --text-color: #111013;\n  --white: #ffffff;\n  --black: #000000;\n  --gray: #707070;\n}\n\n/* Note: If need Disable Decimal-value functionilty open function.scss file */\n/* mini laptop resolution 1349 X 662 and 1246 X 681 and 1218 X 672 */\n/* Mozila Firefox */","// -----------------------------------------------------------------------------\n// This file contains all application-wide Sass mixins.\n// -----------------------------------------------------------------------------\n\n// Media Query mixin\n//  RESPOND ABOVE\n//––––––––––––––––––––––––––––––––––––––––––––––––––\n// @include respond-above(sm) {}\n@mixin respond-above($breakpoint) {\n    // If the breakpoint exists in the map.\n    @if map-has-key($breakpoints, $breakpoint) {\n        // Get the breakpoint value.\n        $breakpoint-value: map-get($breakpoints, $breakpoint);\n\n        // Write the media query.\n        @media (min-width: $breakpoint-value) {\n            @content;\n        }\n\n        // If the breakpoint doesn't exist in the map.\n    } @else {\n        // Log a warning.\n        @warn 'Invalid breakpoint: #{$breakpoint}.';\n    }\n}\n\n//  RESPOND BELOW\n//––––––––––––––––––––––––––––––––––––––––––––––––––\n// @include respond-below(sm) {}\n@mixin respond-below($breakpoint) {\n    // If the breakpoint exists in the map.\n    @if map-has-key($breakpoints, $breakpoint) {\n        // Get the breakpoint value.\n        $breakpoint-value: map-get($breakpoints, $breakpoint);\n\n        // Write the media query.\n        @media (max-width: ($breakpoint-value - 1)) {\n            @content;\n        }\n\n        // If the breakpoint doesn't exist in the map.\n    } @else {\n        // Log a warning.\n        @warn 'Invalid breakpoint: #{$breakpoint}.';\n    }\n}\n\n//  RESPOND BETWEEN\n//––––––––––––––––––––––––––––––––––––––––––––––––––\n// @include respond-between(sm, md) {}\n@mixin respond-between($lower, $upper) {\n    // If both the lower and upper breakpoints exist in the map.\n    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {\n        // Get the lower and upper breakpoints.\n        $lower-breakpoint: map-get($breakpoints, $lower);\n        $upper-breakpoint: map-get($breakpoints, $upper);\n\n        // Write the media query.\n        @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {\n            @content;\n        }\n\n        // If one or both of the breakpoints don't exist.\n    } @else {\n        // If lower breakpoint is invalid.\n        @if (map-has-key($breakpoints, $lower) ==false) {\n            // Log a warning.\n            @warn 'Your lower breakpoint was invalid: #{$lower}.';\n        }\n\n        // If upper breakpoint is invalid.\n        @if (map-has-key($breakpoints, $upper) ==false) {\n            // Log a warning.\n            @warn 'Your upper breakpoint was invalid: #{$upper}.';\n        }\n    }\n}\n\n// REM font baseline\n@mixin rem-baseline($value: $base) {\n    font-size: pxtopercent($value);\n}\n\n/* mini laptop resolution 1349 X 662 and 1246 X 681 and 1218 X 672 */\n@mixin mini-laptop {\n    @media (min-width: 1100px) and (max-height: 800px) {\n        @content;\n    }\n}\n\n// mobile\n@mixin mobile {\n    @media (max-width: 720px) and (orientation: portrait) {\n        @content;\n    }\n\n    @media (max-width: 992px) and (orientation: landscape) {\n        @content;\n    }\n}\n\n// portrait\n@mixin mobile-portrait {\n    @media (max-width: 720px) and (orientation: portrait) {\n        @content;\n    }\n}\n\n// Landscape\n@mixin mobile-landscape {\n    @media (max-width: 992px) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/* Mozila Firefox */\n@mixin firefox {\n    @-moz-document url-prefix() {\n        @content;\n    }\n}\n\n// row space\n@mixin row-space($value) {\n    margin-right: rem(-$value/2);\n    margin-left: rem(-$value/2);\n\n    [class*=\"cell-\"] {\n        padding-left: rem($value/2);\n        padding-right: rem($value/2);\n    }\n}\n\n// input placeholder style\n@mixin placeholder {\n    &::-webkit-input-placeholder {\n        @content;\n    }\n\n    &:-moz-placeholder {\n        @content;\n    }\n\n    &::-moz-placeholder {\n        @content;\n    }\n\n    &:-ms-input-placeholder {\n        @content;\n    }\n}\n\n// icon font : @include icon(\"\\67\");\n@mixin icon($content) {\n    content: $content;\n    font-family: $icon-family;\n    font-style: normal;\n    font-variant: normal;\n    font-weight: normal;\n    text-transform: none;\n}\n\n// custom scroll\n@mixin custom-scroll($color1: $secondary) {\n    &::-webkit-scrollbar {\n        width: 10px;\n    }\n\n    &::-webkit-scrollbar-track {\n        border-radius: 10px;\n        -webkit-border-radius: 10px;\n        --webkit-box-shadow: inset 0 0 6px rgba($black, 0.3);\n    }\n\n    &::-webkit-scrollbar-thumb {\n        -webkit-border-radius: 10px;\n        border-radius: 10px;\n        background: rgba($color1, 0.8);\n        --webkit-box-shadow: inset 0 0 6px rgba($black, 0.5);\n    }\n\n    &::-webkit-scrollbar-thumb:window-inactive {\n        background: $primary-100;\n    }\n}\n\n// Container Spacing\n@mixin container-space($position: \"\", $value: $container-width + $gutters  * 2) {\n    @if ($position== \"left\") {\n        padding-left: calc((100% - #{$value}) / 2);\n        > div {\n            padding-left: $gutters;\n\n            @include respond-below(md) {\n                padding-left: rem(20px);\n            }\n        }\n    } @else if($position== \"right\") {\n        padding-right: calc((100% - #{$value}) / 2);\n        > div {\n            padding-right: $gutters;\n\n            @include respond-below(md) {\n                padding-right: rem(20px);\n            }\n        }\n    } @else {\n        @error 'Wrong input container-space(#{$position}), Please use container-space(left) or container-space(right)';\n    }\n}\n\n// All heading\n@mixin hgroup {\n    @for $i from 1 through 6 {\n        h#{$i},\n        .h#{$i} {\n            @content;\n        }\n    }\n}\n\n// Picture Image\n@mixin pictureImg($pos: absolute) {\n    position: relative;\n    picture {\n        position: $pos;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        display: block;\n        img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n        }\n    }\n}\n// Img fit\n@mixin imgFit($pos: absolute) {\n    img {\n        position: $pos;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n    }\n}\n// Flex-center\n@mixin flex-center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n"]}